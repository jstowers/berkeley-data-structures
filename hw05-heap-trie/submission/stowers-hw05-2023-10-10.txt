Joseph Stowers
Tuesday, October 10, 2023
COMPSCIX404.1-015
HW #5

===================================================================================================

1.
# Last Item in Complete Tree
# --------------------------
# Write a function to get the last item in a complete tree.
# This is easy to do if the complete tree were implemented
# using arrays.  How would we do this if the tree was 
# implemented using nodes?

# CompleteTree.py
from math import log
from Queue import Queue

# Node class for complete tree
class Node:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

    def print(self, level=0):
        if self.right:
            self.right.print(level + 1)
        print("   " * level + str(self.value))
        if self.left:
            self.left.print(level + 1)

# Complete Tree class
class CompleteTree:
    def __init__(self, node=None):
        self.root = node
        self.count = 0
        # array used for printing purposes only
        self.array = []
    
    # Last returns the last value in the complete tree
    def last(self):
        if self.size() == 0:
            return None
  
        # BFS
        last_node = self.level_order()
        return last_node.value
    
    # Size returns the number of nodes in the tree
    def size(self):
        return self.count
    
    # Level_Order conducts a breadth-first traversal
    # of the tree and returns the last node
    def level_order(self, node = None):

        if node is None:
            node = self.root

        queue = Queue()
        queue.enqueue(node)

        while not queue.is_empty():
            current = queue.dequeue()
            last = current
            print(current.value)
            if current.left:
                queue.enqueue(current.left)
            if current.right:
                queue.enqueue(current.right)

        return last

    # Insert adds a node to the complete tree,
    # following the complete tree conditions
    def insert(self, value):
        current = self.root

        if self.root is None:
            self.root = Node(value)
            # array for printing purposes only
            self.array.append(value)
            self.count += 1
            return
        
        while current is not None:
            if current.left is None:
                current.left = Node(value)
                # array for printing purposes only
                self.array.append(value)
                self.count += 1
                return
            elif current.right is None:
                current.right = Node(value)
                # array for printing purposes only
                self.array.append(value)
                self.count += 1
                return
            elif current.left is not None:
                current = current.left
        return
    
    # supporting print method
    def prepare(self, e, field):
        return str(e).center(field)

    # supporting print method
    def level(self, h):
        return self.array[self.first_level(h):self.last_level(h)]

    # supporting print method
    def first_level(self, h):
        return 2**h - 1
    
    # supporting print method
    def last_level(self, h):
        return self.first_level(h+1)

    # print tree
    def print(self, width = None):
        if width is None:
            width = max(len(str(e)) for e in self.array)
        height = int(log(len(self.array), 2)) + 1
        gap = ' ' * width
        print()
        for h in range(height):
            below = 2 ** (height - h -1)
            field = (2 * below -1) * width
            print(gap.join(self.prepare(e, field) for e in self.level(h)))

# Queue class
class Queue:
    def __init__(self, capacity=10):
        self.array = [None] * capacity
        self.front = 0
        self.count = 0
    
    def enqueue(self, element):
        if self.count >= len(self.array):
            raise Exception("Capacity Reached")

        index = (self.front + self.count) % len(self.array)
        self.array[index] = element
        self.count += 1
        
    def dequeue(self):
        if self.is_empty():
            raise Exception("Empty Queue")

        element = self.array[self.front]
        self.front += 1
        if self.front >= len(self.array):
            self.front = 0
        self.count -= 1
        return element
    
    def peek(self):
        if self.is_empty():
            raise Exception("Empty Queue")

        return self.array[self.front]

    def is_empty(self):
        return self.count == 0
    
    def __repr__(self):
        arr = []
        for i in range(self.count):
            index = (i + self.front) % len(self.array)
            arr.append(str(self.array[index]))
        arrstr = ", ".join(arr)
        return f"[{arrstr}] Front: {self.front} count: {self.count} Capacity: {len(self.array)}"

# main.py
from math import log
from CompleteTree import CompleteTree

ct = CompleteTree()
ct.insert(10)
ct.insert(20)
ct.insert(30)
ct.insert(40)
ct.insert(50)
ct.insert(60)
ct.insert(70)
ct.insert(80)
ct.insert(90)
ct.insert(100)
ct.insert(110)
ct.insert(120)
ct.insert(130)
ct.insert(140)
ct.insert(150)
ct.insert(160)

# print complete tree
ct.print()

# total number of nodes
size = ct.size()
print("size =", size)

# last value in tree
last_value = ct.last()
print("last_value =", last_value)


===================================================================================================

2.
# Min Heap Sort
# --------------------
# Write a heap sort function.  Implement heap sort as a min
# heap to sort an array in ascending order.  Try implementing
# it without looking at the source code for max heap.

from math import floor, log

class MinHeap:
    def __init__(self):
        self.array = []

    def root(self):
        if self.size() == 0:
            return None

        return self.array[0]

    def last(self):
        if self.size() == 0:
            return None

        return self.array[self.size()-1]
    
    def size(self):
        return len(self.array)
    
    def parent_index(self, index):
        return floor((index-1)/2)
    
    def has_left_child(self, index):
        return self.left_child_index(index) < self.size()
    
    def left_child_index(self, index):
        return (index * 2) + 1
    
    def has_right_child(self, index):
        return self.right_child_index(index) < self.size()

    def right_child_index(self, index):
        return (index * 2) + 2
    
    # add new value to heap
    def insert(self, value):
        # add new value at end of array
        self.array.append(value)
        
        # index of new value
        i_new = self.size() - 1

        # heapify up
        self.swim(i_new)

    # sort returns an array of the heap values sorted
    def sort(self):
        sorted = []

        if self.size() == 0:
            return None

        while self.size() > 0:
            sorted.append(self.delete())

        return sorted

    # heapify up
    def swim(self, i):

        # determine index of parent
        i_parent = self.parent_index(i)

        # restore heap condition
        while (i > 0 and self.array[i] < self.array[i_parent]):
            # swap new value with parent value
            self.array[i], self.array[i_parent] = self.array[i_parent], self.array[i]
            
            # set new node index to parent node index
            i = i_parent
            
            # determine index of parent
            i_parent = self.parent_index(i)

    # delete and return min value
    def delete(self):
        root = self.root()

        start_index = 0

        # delete root value and replace with last
        if self.size() == 1:
            self.array.pop()
        else:
            self.array[start_index] = self.array.pop()

        self.sink(start_index)

        return root
    
    # heapify down
    def sink(self, index):
        
        while self.has_lesser_child(index):

            # find index of smaller child
            smaller_child_index = self.find_smaller_child_index(index)

            # swap node with its smaller child:
            self.array[smaller_child_index], self.array[index] = self.array[index], self.array[smaller_child_index]

            # update index
            index = smaller_child_index

    # check whether node at index has left and right children 
    # and if any of its children are less than the node value
    def has_lesser_child(self,index):

        return ((self.has_left_child(index) and 
            self.array[self.left_child_index(index)] < self.array[index])
            or (self.has_right_child(index) and
                self.array[self.right_child_index(index)] < self.array[index]))
    
    def find_smaller_child_index(self, index):

        # if no right child, return left child index
        if self.has_right_child(index) is False:
            return self.left_child_index(index)
        
        # if right child < left child, return right child index
        if self.array[self.right_child_index(index)] < self.array[self.left_child_index(index)]:
            return self.right_child_index(index)
        
        # else, left child < right child, return left child index
        else:
            return self.left_child_index(index)

    # supporting print method
    def prepare(self, e, field):
        return str(e).center(field)

    # supporting print method
    def level(self, h):
        return self.array[self.first_level(h):self.last_level(h)]

    # supporting print method
    def first_level(self, h):
        return 2**h - 1
    
    # supporting print method
    def last_level(self, h):
        return self.first_level(h+1)

    # print heap in tree form
    def print(self, width = None):
        if width is None:
            width = max(len(str(e)) for e in self.array)
        height = int(log(len(self.array), 2)) + 1
        gap = ' ' * width
        print()
        for h in range(height):
            below = 2 ** (height - h -1)
            field = (2 * below -1) * width
            print(gap.join(self.prepare(e, field) for e in self.level(h)))


===================================================================================================

3.
# Longest String Prefix
# -------------------------
#
# Given an array of words, write a function that returns the longest prefix.
# Write it so that it performs efficiently.
#
# ex) 
# words = ["apple", "appetite", "apparatus", "appliance"]
# solution => "app"

# main.py
from Trie import Trie

# define Test class and instantiate test cases
class Test:
    def __init__(self, array = []):
        self.array = array
        self.trie = Trie()

test1 = Test(["apple", "appetite", "apparatus", "appliance"])
test2 = Test(["apple", "orange", "banana", "peach"])
test3 = Test(["lemon", "lime", "lemongrass", "lychee", "licorice"])
test4 = Test(["lime", "limeberry", "lingonberry"])
test5 = Test(["grape", "grapes", "grapefruit", "grapple"])

# define and execute test suite
test_suite = [
    test1,
    test2,
    test3,
    test4,
    test5,
]

for index, test in enumerate(test_suite):
    print()
    result = test.trie.longest_prefix_from_array(test.array)
    print(f'{index + 1}. {test.array}')
    print(f'   longest prefix = {result}')
    print()
    print("--------------------------------------------------------------")

# Trie.py
class TrieNode:
    def __init__(self, value):
        self.children = {}
        self.value = value

class Trie:
    def __init__(self):
        self.root = TrieNode("")
        self.end_char = "*"
            
    def insert(self, word):
        current = self.root
        for c in word:

            if c not in current.children:
                current.children[c] = TrieNode(c)

            current = current.children[c]
        current.children[self.end_char] = None
        current.is_end = True

    def longest_prefix_from_array(self, array):

        # check for empty array
        if len(array) == 0:
            raise Exception("array is empty")
        
        # add each word to trie
        for word in array:
            self.insert(word)

        # find longest prefix
        return self.longest_prefix()

    def longest_prefix(self, current = None, prefix =""):
        
        # set current to root node
        if current is None:
            current = self.root

        # once there is more than 1 child, the longest 
        # prefix ends
        if len(current.children) != 1 or current == "*":
            if len(prefix) == 0:
                return None
            else: return prefix

        # the longest prefix continues to build one
        # character at a time
        if len(current.children) == 1:
            for child in current.children:
                prefix += child
                current = current.children[child]
        
        return self.longest_prefix(current, prefix)
        
    # search returns word if it exists
    def search(self, s):
        if len(s) == 0:
            return None

        current = self.root
        for c in s:
            if c not in current.children:
                return None
            current = current.children[c]
        return current
    
    def delete(self, word, i=0, current=None):
        if i == len(word):
            return True

        if current is None:
            current = self.root
            word = word + self.end_char

        char = word[i]
        if char not in current.children:
            return False
        
        next_node = current.children[char]
        print("pre: ",word, char, i+1)
        should_delete_ref = self.delete(word, i + 1, next_node)
        print("post: ",word, char, i+1, should_delete_ref)

        if should_delete_ref:
            del current.children[char]
            return len(current.children) == 0
        return False
    
    def delete_preorder(self, word, i=0, current=None):
        if i == len(word):
            return True

        if current is None:
            current = self.root
            word = word + self.end_char

        char = word[i]
        if char not in current.children:
            return False
        
        next_node = current.children[char]

        del current.children[char]

        should_delete_ref = self.delete(word, i + 1, next_node)

        return False

    def print_keys(self, current):
        if current is None:
            return

        for c in current.children:
            self.print_keys(current.children[c])
            
    def print_words(self, node=None, word="", words=None):
        if words is None:
            words = []
        current = node
        if node is None:
            current = self.root
        
        for key, node in sorted(current.children.items()):
            if key == self.end_char:
                words.append(word)
            else:
                self.print_words(node, word + key, words)
        return words
    
    def autocomplete(self, prefix):
        current = self.search(prefix)
        if current is None:
            return None
        return self.print_words(current, prefix)
    
    def suggest(self, s):
        if s is None or len(s) == 0:
            return None
        suggestions = self.autocomplete(s)
        if suggestions is None or len(suggestions) == 0:
            return self.suggest(s[:-1])
        else:
            return suggestions
    
